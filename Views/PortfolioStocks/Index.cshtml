@model IEnumerable<StockPortfolio.Models.PortfolioStock>

@{
    ViewData["Title"] = "Index";
    var quoteList = ViewBag.quoteList;
}

<h1>Portfolio</h1>

<div id="portfolioMetricsDiv"></div>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Symbol)</th>
            <th>@Html.DisplayNameFor(model => model.CompanyName)</th>
            <th>@Html.DisplayNameFor(model => model.Currency)</th>
            <th>@Html.DisplayNameFor(model => model.AveragePrice)</th>
            <th>@Html.DisplayNameFor(model => model.Volume)</th>
            <th>Market Price</th>
            <th>Total Return</th>
            <th>% Return</th>
            <th>Total Value</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.Symbol)</td>
                <td>@Html.DisplayFor(modelItem => item.CompanyName)</td>
                <td>@Html.DisplayFor(modelItem => item.Currency)</td>
                <td>@Math.Round(item.AveragePrice, 2)</td>
                <td>@Html.DisplayFor(modelItem => item.Volume)</td>
                @foreach (var quote in quoteList)
                {
                    if (quote.Symbol == item.Symbol)
                    {
                        var quotePrice = quote.Price;
                        var averageStockValue = item.AveragePrice * item.Volume;
                        var totalValue = quotePrice * item.Volume;
                        var totalReturn = totalValue - averageStockValue;
                        var percentageReturn = averageStockValue == 0 ? 0 : (totalReturn / averageStockValue * 100);

                        <td>@Math.Round(quotePrice, 2)</td>
                        <td class="changeColored">@Math.Round(totalReturn, 2)</td>
                        <td class="changeColored">@Math.Round((double)percentageReturn, 2)%</td>
                        <td class="totalValue">@Math.Round(totalValue, 2)</td>
                    }
                }
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.ID">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>


<style>

    .container {
        max-width: 1300px;
    }
</style>


@section Scripts {
    <script>
        $(document).ready(function () {

            $(".changeColored:contains('-')").addClass('lossColored');
            $(".changeColored:not(:contains('-'))").addClass('gainColored');


            // calculate portfolio value
            var portfolioValue = 0;
            var totalValueTdTags = $(".totalValue");
            for (totalValue of totalValueTdTags) {
                portfolioValue += parseFloat($(totalValue).text());
            }
            portfolioValue = portfolioValue.toFixed(2);
            $("#portfolioMetricsDiv").html(`<h3>Value: $${portfolioValue}</h3>`);


        });
    </script>
}
